<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
    <springProfile name="local">
		<property resource="logback-local.properties"/>
	</springProfile>

    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
   <!-- log file path --> 
	<property name="LOG_PATH" value="${log.config.path}"/>
	 
	<!-- log file name --> 
	<property name="LOG_FILE_NAME" value="${log.config.filename}"/>
	
	<!-- err log file name --> 
	<property name="ERR_LOG_FILE_NAME" value="error_log"/>
	
	<!-- pattern --> 
	<property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>
	
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
	 		<pattern>${LOG_PATTERN}</pattern> 
	 	</encoder> 
    </appender>
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>{LOG_LEVEL}</level>
        </filter>
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
       
        <!-- 출력패턴 설정--> 
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
			<pattern>${LOG_PATTERN}</pattern> 
	    </encoder> 
        
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern> 
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거--> 
		     <maxHistory>30</maxHistory> 
        </rollingPolicy>
    </appender>
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
	  		<level>error</level> 
	  		<onMatch>ACCEPT</onMatch> 
	  		<onMismatch>DENY</onMismatch> 
	  	</filter> 
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
       
        <!-- 출력패턴 설정--> 
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
			<pattern>${LOG_PATTERN}</pattern> 
	    </encoder> 
        
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern> 
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거--> 
		     <maxHistory>30</maxHistory> 
        </rollingPolicy>
    </appender>
   
     <root level="{LOG_LEVEL}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING"/>
        <appender-ref ref="ERROR"/>
    </root>
</configuration>